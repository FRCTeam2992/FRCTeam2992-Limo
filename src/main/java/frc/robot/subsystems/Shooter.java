// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;

import frc.robot.Constants;
import frc.robot.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj2.command.SubsystemBase;

import com.ctre.phoenix.motorcontrol.ControlMode;
import com.ctre.phoenix.motorcontrol.NeutralMode;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;
import com.ctre.phoenix.motorcontrol.can.WPI_VictorSPX;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 *
 */
public class Shooter extends SubsystemBase {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

public int shooterSetSpeed = Constants.defaultShooterSpeed;

private int dashboardCounter = 0;



    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
private WPI_TalonSRX leadShooterMotor;
private WPI_VictorSPX followShooterMotor;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    /**
    *
    */
    public Shooter() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
leadShooterMotor = new WPI_TalonSRX(9);
 
 

followShooterMotor = new WPI_VictorSPX(10);
 
 


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        addChild("leadShooterMotor", leadShooterMotor);
        addChild("followShooterMotor", followShooterMotor);

        //followShooterMotor.follow(leadShooterMotor);
        followShooterMotor.setInverted(true);
        leadShooterMotor.setNeutralMode(NeutralMode.Coast);
        followShooterMotor.setNeutralMode(NeutralMode.Coast);
        
    }

    @Override
    public void periodic() {
         // Display the Shooter Set Speed and Current RPM
    if (++dashboardCounter >= 5) {
        SmartDashboard.putNumber("Shooter Set Speed", shooterSetSpeed);
        SmartDashboard.putNumber("Shooter Current RPM", getShooterRPM());
  
        if (getShooterRPM() > 3200) {
          SmartDashboard.putBoolean("Shooter State", true);
        }
        else {
          SmartDashboard.putBoolean("Shooter State", false);
        }
        dashboardCounter = 0;
      }
    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }

    
  public void setShooterSpeed(double speed) {
    leadShooterMotor.set(ControlMode.PercentOutput, speed);
  }

  public void setShooterVelocity(double velocity) {
    leadShooterMotor.set(ControlMode.Velocity, velocity);
  }

  public double getShooterRPM() {
    return (leadShooterMotor.getSelectedSensorVelocity() * 600) / (Constants.shooterEncoderPulses * 4);
  }
}
